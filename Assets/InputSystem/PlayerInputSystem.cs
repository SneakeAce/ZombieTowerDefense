//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/InputSystem/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputSystem/PlayerInputSystem.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""SelectionUnit"",
            ""id"": ""655e9155-f410-4a7f-a2ef-4cc16f404aaf"",
            ""actions"": [
                {
                    ""name"": ""SelectUnit"",
                    ""type"": ""Button"",
                    ""id"": ""c8c49f83-d44c-4b2a-80f2-b88d7c6e7f76"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChoosePoint"",
                    ""type"": ""Button"",
                    ""id"": ""cc20dfac-ca37-448c-a8ae-271d33f32b59"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""42122673-d8d6-4b15-b5fe-db09188a043c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dbe4fb16-0869-4b97-8456-e942b2bcd4f9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3a2280d-6eaa-4714-a120-4180577e6170"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aca4bd97-853f-40b9-a4ce-148153cf754a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChoosePoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CallWindowHiringUnits"",
            ""id"": ""d680b787-d788-452d-989c-d3e28c8635b1"",
            ""actions"": [
                {
                    ""name"": ""ToggleWindowHiringUnits"",
                    ""type"": ""Button"",
                    ""id"": ""18497600-2aa3-4535-8554-a43909352068"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ddb46dfe-97a7-4434-ad98-daad42b08158"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleWindowHiringUnits"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HireUnits"",
            ""id"": ""04b3d4c1-97d3-4fd9-a1f7-064cf9e884aa"",
            ""actions"": [
                {
                    ""name"": ""CreateMarineUnit"",
                    ""type"": ""Button"",
                    ""id"": ""30b221d5-145c-4d4d-b2e5-c35d827910b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fae45d0c-22d4-44c9-9f0c-0680f27d7fe6"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreateMarineUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SelectionUnit
        m_SelectionUnit = asset.FindActionMap("SelectionUnit", throwIfNotFound: true);
        m_SelectionUnit_SelectUnit = m_SelectionUnit.FindAction("SelectUnit", throwIfNotFound: true);
        m_SelectionUnit_ChoosePoint = m_SelectionUnit.FindAction("ChoosePoint", throwIfNotFound: true);
        m_SelectionUnit_MousePosition = m_SelectionUnit.FindAction("MousePosition", throwIfNotFound: true);
        // CallWindowHiringUnits
        m_CallWindowHiringUnits = asset.FindActionMap("CallWindowHiringUnits", throwIfNotFound: true);
        m_CallWindowHiringUnits_ToggleWindowHiringUnits = m_CallWindowHiringUnits.FindAction("ToggleWindowHiringUnits", throwIfNotFound: true);
        // HireUnits
        m_HireUnits = asset.FindActionMap("HireUnits", throwIfNotFound: true);
        m_HireUnits_CreateMarineUnit = m_HireUnits.FindAction("CreateMarineUnit", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_SelectionUnit.enabled, "This will cause a leak and performance issues, PlayerInput.SelectionUnit.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CallWindowHiringUnits.enabled, "This will cause a leak and performance issues, PlayerInput.CallWindowHiringUnits.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_HireUnits.enabled, "This will cause a leak and performance issues, PlayerInput.HireUnits.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SelectionUnit
    private readonly InputActionMap m_SelectionUnit;
    private List<ISelectionUnitActions> m_SelectionUnitActionsCallbackInterfaces = new List<ISelectionUnitActions>();
    private readonly InputAction m_SelectionUnit_SelectUnit;
    private readonly InputAction m_SelectionUnit_ChoosePoint;
    private readonly InputAction m_SelectionUnit_MousePosition;
    /// <summary>
    /// Provides access to input actions defined in input action map "SelectionUnit".
    /// </summary>
    public struct SelectionUnitActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SelectionUnitActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SelectionUnit/SelectUnit".
        /// </summary>
        public InputAction @SelectUnit => m_Wrapper.m_SelectionUnit_SelectUnit;
        /// <summary>
        /// Provides access to the underlying input action "SelectionUnit/ChoosePoint".
        /// </summary>
        public InputAction @ChoosePoint => m_Wrapper.m_SelectionUnit_ChoosePoint;
        /// <summary>
        /// Provides access to the underlying input action "SelectionUnit/MousePosition".
        /// </summary>
        public InputAction @MousePosition => m_Wrapper.m_SelectionUnit_MousePosition;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SelectionUnit; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SelectionUnitActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SelectionUnitActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SelectionUnitActions" />
        public void AddCallbacks(ISelectionUnitActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectionUnitActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectionUnitActionsCallbackInterfaces.Add(instance);
            @SelectUnit.started += instance.OnSelectUnit;
            @SelectUnit.performed += instance.OnSelectUnit;
            @SelectUnit.canceled += instance.OnSelectUnit;
            @ChoosePoint.started += instance.OnChoosePoint;
            @ChoosePoint.performed += instance.OnChoosePoint;
            @ChoosePoint.canceled += instance.OnChoosePoint;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SelectionUnitActions" />
        private void UnregisterCallbacks(ISelectionUnitActions instance)
        {
            @SelectUnit.started -= instance.OnSelectUnit;
            @SelectUnit.performed -= instance.OnSelectUnit;
            @SelectUnit.canceled -= instance.OnSelectUnit;
            @ChoosePoint.started -= instance.OnChoosePoint;
            @ChoosePoint.performed -= instance.OnChoosePoint;
            @ChoosePoint.canceled -= instance.OnChoosePoint;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SelectionUnitActions.UnregisterCallbacks(ISelectionUnitActions)" />.
        /// </summary>
        /// <seealso cref="SelectionUnitActions.UnregisterCallbacks(ISelectionUnitActions)" />
        public void RemoveCallbacks(ISelectionUnitActions instance)
        {
            if (m_Wrapper.m_SelectionUnitActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SelectionUnitActions.AddCallbacks(ISelectionUnitActions)" />
        /// <seealso cref="SelectionUnitActions.RemoveCallbacks(ISelectionUnitActions)" />
        /// <seealso cref="SelectionUnitActions.UnregisterCallbacks(ISelectionUnitActions)" />
        public void SetCallbacks(ISelectionUnitActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectionUnitActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectionUnitActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SelectionUnitActions" /> instance referencing this action map.
    /// </summary>
    public SelectionUnitActions @SelectionUnit => new SelectionUnitActions(this);

    // CallWindowHiringUnits
    private readonly InputActionMap m_CallWindowHiringUnits;
    private List<ICallWindowHiringUnitsActions> m_CallWindowHiringUnitsActionsCallbackInterfaces = new List<ICallWindowHiringUnitsActions>();
    private readonly InputAction m_CallWindowHiringUnits_ToggleWindowHiringUnits;
    /// <summary>
    /// Provides access to input actions defined in input action map "CallWindowHiringUnits".
    /// </summary>
    public struct CallWindowHiringUnitsActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CallWindowHiringUnitsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "CallWindowHiringUnits/ToggleWindowHiringUnits".
        /// </summary>
        public InputAction @ToggleWindowHiringUnits => m_Wrapper.m_CallWindowHiringUnits_ToggleWindowHiringUnits;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_CallWindowHiringUnits; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CallWindowHiringUnitsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CallWindowHiringUnitsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CallWindowHiringUnitsActions" />
        public void AddCallbacks(ICallWindowHiringUnitsActions instance)
        {
            if (instance == null || m_Wrapper.m_CallWindowHiringUnitsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CallWindowHiringUnitsActionsCallbackInterfaces.Add(instance);
            @ToggleWindowHiringUnits.started += instance.OnToggleWindowHiringUnits;
            @ToggleWindowHiringUnits.performed += instance.OnToggleWindowHiringUnits;
            @ToggleWindowHiringUnits.canceled += instance.OnToggleWindowHiringUnits;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CallWindowHiringUnitsActions" />
        private void UnregisterCallbacks(ICallWindowHiringUnitsActions instance)
        {
            @ToggleWindowHiringUnits.started -= instance.OnToggleWindowHiringUnits;
            @ToggleWindowHiringUnits.performed -= instance.OnToggleWindowHiringUnits;
            @ToggleWindowHiringUnits.canceled -= instance.OnToggleWindowHiringUnits;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CallWindowHiringUnitsActions.UnregisterCallbacks(ICallWindowHiringUnitsActions)" />.
        /// </summary>
        /// <seealso cref="CallWindowHiringUnitsActions.UnregisterCallbacks(ICallWindowHiringUnitsActions)" />
        public void RemoveCallbacks(ICallWindowHiringUnitsActions instance)
        {
            if (m_Wrapper.m_CallWindowHiringUnitsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CallWindowHiringUnitsActions.AddCallbacks(ICallWindowHiringUnitsActions)" />
        /// <seealso cref="CallWindowHiringUnitsActions.RemoveCallbacks(ICallWindowHiringUnitsActions)" />
        /// <seealso cref="CallWindowHiringUnitsActions.UnregisterCallbacks(ICallWindowHiringUnitsActions)" />
        public void SetCallbacks(ICallWindowHiringUnitsActions instance)
        {
            foreach (var item in m_Wrapper.m_CallWindowHiringUnitsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CallWindowHiringUnitsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CallWindowHiringUnitsActions" /> instance referencing this action map.
    /// </summary>
    public CallWindowHiringUnitsActions @CallWindowHiringUnits => new CallWindowHiringUnitsActions(this);

    // HireUnits
    private readonly InputActionMap m_HireUnits;
    private List<IHireUnitsActions> m_HireUnitsActionsCallbackInterfaces = new List<IHireUnitsActions>();
    private readonly InputAction m_HireUnits_CreateMarineUnit;
    /// <summary>
    /// Provides access to input actions defined in input action map "HireUnits".
    /// </summary>
    public struct HireUnitsActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public HireUnitsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "HireUnits/CreateMarineUnit".
        /// </summary>
        public InputAction @CreateMarineUnit => m_Wrapper.m_HireUnits_CreateMarineUnit;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_HireUnits; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="HireUnitsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(HireUnitsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="HireUnitsActions" />
        public void AddCallbacks(IHireUnitsActions instance)
        {
            if (instance == null || m_Wrapper.m_HireUnitsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HireUnitsActionsCallbackInterfaces.Add(instance);
            @CreateMarineUnit.started += instance.OnCreateMarineUnit;
            @CreateMarineUnit.performed += instance.OnCreateMarineUnit;
            @CreateMarineUnit.canceled += instance.OnCreateMarineUnit;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="HireUnitsActions" />
        private void UnregisterCallbacks(IHireUnitsActions instance)
        {
            @CreateMarineUnit.started -= instance.OnCreateMarineUnit;
            @CreateMarineUnit.performed -= instance.OnCreateMarineUnit;
            @CreateMarineUnit.canceled -= instance.OnCreateMarineUnit;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HireUnitsActions.UnregisterCallbacks(IHireUnitsActions)" />.
        /// </summary>
        /// <seealso cref="HireUnitsActions.UnregisterCallbacks(IHireUnitsActions)" />
        public void RemoveCallbacks(IHireUnitsActions instance)
        {
            if (m_Wrapper.m_HireUnitsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="HireUnitsActions.AddCallbacks(IHireUnitsActions)" />
        /// <seealso cref="HireUnitsActions.RemoveCallbacks(IHireUnitsActions)" />
        /// <seealso cref="HireUnitsActions.UnregisterCallbacks(IHireUnitsActions)" />
        public void SetCallbacks(IHireUnitsActions instance)
        {
            foreach (var item in m_Wrapper.m_HireUnitsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HireUnitsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="HireUnitsActions" /> instance referencing this action map.
    /// </summary>
    public HireUnitsActions @HireUnits => new HireUnitsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SelectionUnit" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SelectionUnitActions.AddCallbacks(ISelectionUnitActions)" />
    /// <seealso cref="SelectionUnitActions.RemoveCallbacks(ISelectionUnitActions)" />
    public interface ISelectionUnitActions
    {
        /// <summary>
        /// Method invoked when associated input action "SelectUnit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectUnit(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChoosePoint" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChoosePoint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MousePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMousePosition(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "CallWindowHiringUnits" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CallWindowHiringUnitsActions.AddCallbacks(ICallWindowHiringUnitsActions)" />
    /// <seealso cref="CallWindowHiringUnitsActions.RemoveCallbacks(ICallWindowHiringUnitsActions)" />
    public interface ICallWindowHiringUnitsActions
    {
        /// <summary>
        /// Method invoked when associated input action "ToggleWindowHiringUnits" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToggleWindowHiringUnits(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "HireUnits" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="HireUnitsActions.AddCallbacks(IHireUnitsActions)" />
    /// <seealso cref="HireUnitsActions.RemoveCallbacks(IHireUnitsActions)" />
    public interface IHireUnitsActions
    {
        /// <summary>
        /// Method invoked when associated input action "CreateMarineUnit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCreateMarineUnit(InputAction.CallbackContext context);
    }
}
